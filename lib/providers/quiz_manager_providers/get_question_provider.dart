
import 'package:quiz_app/databases/mongo_db/mongo_connect.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import '../../models/question/question_model.dart';
part 'get_question_provider.g.dart';
/// A Riverpod state provider for fetching and managing questions.
///
/// The [GetQuestionP] class extends from a generated provider class (likely generated by Riverpod).
/// It is responsible for fetching and managing questions based on subject and question ID.
@riverpod
class GetQuestionP extends _$GetQuestionP {
  /// Initializes the state with a `null` value.
  @override
  FutureOr<QuestionModel?> build() {
    return null;
  }

  /// Fetches a question based on the specified [subject] and [questionId].
  ///
  /// Returns a [QuestionModel] if the question is found, `null` otherwise.
  Future<QuestionModel?> getQuestion({
    required String subject,
    required int questionId,
  }) async {
    state = const AsyncValue.loading();
    try {
      final db = MongoConnect().database!;
      final questionData = await db.collection("Questions").findOne(
        {"subject": subject, "questionId": questionId},
      );
      if (questionData == null || questionData.isEmpty) {
        state = const AsyncValue.data(null);
        return null;
      }
      final model = QuestionModel.fromJson(questionData);
      state = AsyncValue.data(model);
      return model;
    } catch (e, st) {
      state = AsyncValue.error(e, st);
      return null;
    }
  }

  /// Changes the state to the specified [question] and returns the updated question.
  Future<QuestionModel?> changeQuestion(QuestionModel question) async {
    state = AsyncValue.data(question);
    return state.value;
  }
}
